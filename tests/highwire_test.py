import unittest

from lxml.etree import fromstring

from pyuntl.highwire_structure import (format_date_string, HighwireElement,
                                       CitationTitle, CitationAuthor,
                                       CitationPublisher,
                                       CitationPublicationDate,
                                       CitationOnlineDate, citation_director,
                                       identifier_director)
from pyuntl.untldoc import (untlpy2highwirepy, untldict2py, highwirepy2dict,
                            generate_highwire_xml, generate_highwire_json,
                            generate_highwire_text)
from tests import UNTL_DICT


HIGHWIRE_XML = b"""<?xml version="1.0" encoding="UTF-8"?>
<metadata>
  <meta content="The Bronco, Yearbook of Hardin-Simmons University, 1944" name="citation_title"/>
  <meta content="Hardin-Simmons University" name="citation_publisher"/>
  <meta content="1944" name="citation_publication_date"/>
  <meta content="06/29/2008" name="citation_online_date"/>
</metadata>
"""

HIGHWIRE_JSON = """{
    "citation_online_date": [
        {
            "content": "06/29/2008"
        }
    ],
    "citation_publication_date": [
        {
            "content": "1944"
        }
    ],
    "citation_publisher": [
        {
            "content": "Hardin-Simmons University"
        }
    ],
    "citation_title": [
        {
            "content": "The Bronco, Yearbook of Hardin-Simmons University, 1944"
        }
    ]
}"""

HIGHWIRE_TEXT = """citation_title: The Bronco, Yearbook of Hardin-Simmons University, 1944
citation_publisher: Hardin-Simmons University
citation_publication_date: 1944
citation_online_date: 06/29/2008"""


class TestHighwire(unittest.TestCase):
    def testHighwire2Dict(self):
        """Test dictionary creation from Highwire."""
        untlpy = untldict2py(UNTL_DICT)
        highwi = untlpy2highwirepy(untlpy)
        hidict = highwirepy2dict(highwi)
        self.assertEqual(type(hidict), dict)

    def testXml(self):
        """Test highwire elements are converted to XML bytes.

        Because the order of attributes is not guaranteed, we convert the
        generated bytes and expected bytes into ElementTrees to compare
        the attributes.
        """
        untlpy = untldict2py(UNTL_DICT)
        highwire_elements = untlpy2highwirepy(untlpy)
        highwire_xml = generate_highwire_xml(highwire_elements)

        # Get a sorted list of attributes for child elements in the generated and expected XML.
        generated_tree = fromstring(highwire_xml)
        generated_attribs = [child.attrib for child in generated_tree]
        generated_attribs = sorted(generated_attribs, key=lambda i: (i['content'], i['name']))
        expected_attribs = [child.attrib for child in fromstring(HIGHWIRE_XML)]
        expected_attribs = sorted(expected_attribs, key=lambda i: (i['content'], i['name']))
        self.assertEqual(expected_attribs, generated_attribs)

        # Our generated XML has a `metadata` element with all `meta` element children.
        self.assertEqual(generated_tree.tag, 'metadata')
        for child in generated_tree:
            self.assertEqual(child.tag, 'meta')

    def testJson(self):
        """Test highwire elements are converted to a JSON string."""
        untlpy = untldict2py(UNTL_DICT)
        highwire_elements = untlpy2highwirepy(untlpy)
        highwire_json = generate_highwire_json(highwire_elements)
        self.assertEqual(highwire_json, HIGHWIRE_JSON)

    def testText(self):
        """Test highwire elements are converted to ANVL text."""
        untlpy = untldict2py(UNTL_DICT)
        highwire_elements = untlpy2highwirepy(untlpy)
        highwire_text = generate_highwire_text(highwire_elements)
        self.assertEqual(highwire_text, HIGHWIRE_TEXT)

    def testTextEscape(self):
        """Test highwire elements are converted to ANVL text."""
        small_untl_dict = {'title': [{'content': 'Clifford & Lassie',
                                      'qualifier': 'officialtitle'}],
                           'meta': [{'content': 'ark:/67531/metapth38622',
                                     'qualifier': 'ark'},
                                    {'content': '2008-06-29, 00:31:14',
                                     'qualifier': 'metadataCreationDate'}]}
        untlpy = untldict2py(small_untl_dict)
        highwire_elements = untlpy2highwirepy(untlpy, escape=True)
        highwire_text = generate_highwire_text(highwire_elements)
        expected = ('citation_title: Clifford &amp; Lassie\n'
                    'citation_online_date: 06/29/2008')
        self.assertEqual(highwire_text, expected)

    def testUNTL2HIGHWIRE(self):
        """Test conversion from UNTL to Highwire."""
        untlpy = untldict2py(UNTL_DICT)
        highwi = untlpy2highwirepy(untlpy)
        for element in highwi:
            self.assertTrue(issubclass(type(element), HighwireElement))

    def testFormatDateString(self):
        """Test date is formatted as expected."""
        date = format_date_string(9)
        self.assertTrue(date == '09')
        date = format_date_string(90)
        self.assertTrue(date == '90')

    def testCreateHighwireElement(self):
        """Test Highwire elements can be created and content filled."""
        highwire = HighwireElement(content='test test test')
        self.assertEqual(highwire.content, 'test test test')

    def testCitationDirectorpublicationTitle(self):
        """Test CitationDirector creates proper highwire object."""
        highwire = citation_director(qualifier='publicationTitle')
        self.assertEqual(highwire.name, 'citation_journal_title')

    def testCitationDirectorvolume(self):
        """Test CitationDirector with volume creates proper
        highwire object.
        """
        highwire = citation_director(qualifier='volume')
        self.assertEqual(highwire.name, 'citation_volume')

    def testCitationDirectorpageStart(self):
        """Test CitationDirector with pageStart creates proper
        highwire object.
        """
        highwire = citation_director(qualifier='pageStart')
        self.assertEqual(highwire.name, 'citation_firstpage')

    def testCitationDirectorissue(self):
        """Test CitationDirector with issue creates proper
        highwire object.
        """
        highwire = citation_director(qualifier='issue')
        self.assertEqual(highwire.name, 'citation_issue')

    def testCitationDirectorpageEnd(self):
        """Test CitationDirector with pageEnd creates proper
        highwire object.
        """
        highwire = citation_director(qualifier='pageEnd')
        self.assertEqual(highwire.name, 'citation_lastpage')

    def testIdentifierDirectorISBN(self):
        """Test identifier expansion for ISBN."""
        highwire = identifier_director(qualifier='ISBN')
        self.assertEqual(highwire.name, 'citation_isbn')

    def testIdentifierDirectorISSN(self):
        """Test identifier expansion for ISSN."""
        highwire = identifier_director(qualifier='ISSN')
        self.assertEqual(highwire.name, 'citation_issn')

    def testIdentifierDirectorDOI(self):
        """Test identifier expansion for DOI."""
        highwire = identifier_director(qualifier='DOI')
        self.assertEqual(highwire.name, 'citation_doi')

    def testIdentifierDirectorREPNO(self):
        """Test identifier expansion for technical report number."""
        highwire = identifier_director(qualifier='REP-NO')
        self.assertEqual(highwire.name, 'citation_technical_report_number')

    def testCitationOnlineDate(self):
        """Test successful creation of online date object."""
        c = CitationOnlineDate(qualifier='this', content='that')
        self.assertEqual(c.name, 'citation_online_date')

    def testCitationPublicationDate(self):
        """Test successful creation of publication date object."""
        c = CitationPublicationDate(content='that')
        self.assertEqual(c.name, 'citation_publication_date')

    def testCitationPublisher(self):
        """Test publisher generates properly."""
        c = CitationPublisher(qualifier='that')
        self.assertEqual(c.name, 'citation_publisher')

    def testCitationAuthor(self):
        """Test author is created successfully."""
        c = CitationAuthor(qualifier='test')
        self.assertEqual(c.name, 'citation_author')

    def testCitationTitle(self):
        """Test title is created successfully."""
        c = CitationTitle(qualifier='test')
        self.assertEqual(c.name, 'citation_title')


def suite():
    test_suite = unittest.makeSuite(TestHighwire, 'test')
    return test_suite


if __name__ == '__main__':
    unittest.main()
